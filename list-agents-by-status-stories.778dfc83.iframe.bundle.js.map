{"version":3,"file":"list-agents-by-status-stories.778dfc83.iframe.bundle.js","mappings":";;;;;;;;;;AAqBA;;;;AAUA;;;ACgEA;AAGA;;AAEA;;;;;;AAOA;;;AAGA;;AAEA;;AAIA;;;AASA;AAGA;;AAEA;;;;;;AAOA;;;AAGA;;AAEA;;AAIA;;AAKA;;AAKA;AAMA;AAKA;AAEA;;AAKA;;AAIA;AAKA;;AAGA;;AAIA;;AAKA;;AAGA;;;;AArKA;;ACfA;;;AAGA;;;AAOA;ACRA;AAEA;;;;AANA;;;;ACLA;ACyBA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AApBA","sources":["webpack://@holochain-open-dev/peer-status-dev/./node_modules/@holochain-open-dev/profiles/dist/elements/profile-list-item-skeleton.js","webpack://@holochain-open-dev/peer-status-dev/../../src/elements/list-agents-by-status.ts","webpack://@holochain-open-dev/peer-status-dev/./stories/list-agents-by-status.stories.js","webpack://@holochain-open-dev/peer-status-dev/../../src/elements/avatar-with-status.ts","webpack://@holochain-open-dev/peer-status-dev/../../src/elements/peer-status-context.ts","webpack://@holochain-open-dev/peer-status-dev/../../src/elements/peer-status.ts"],"sourcesContent":["import { __decorate } from \"tslib\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement } from \"lit/decorators.js\";\nimport { sharedStyles } from \"@holochain-open-dev/elements\";\nimport \"@shoelace-style/shoelace/dist/components/skeleton/skeleton.js\";\n/**\n * @element profile-list-item-skeleton\n */\nlet ProfileListItemSkeleton = class ProfileListItemSkeleton extends LitElement {\n    render() {\n        return html `<div class=\"row\" style=\"align-items: center; width: 150px\">\n      <sl-skeleton\n        effect=\"sheen\"\n        style=\"height: 32px; width: 32px; border-radius: 50%; margin: 8px\"\n      ></sl-skeleton\n      ><sl-skeleton\n        effect=\"sheen\"\n        style=\"flex: 1; margin: 8px; border-radius: 12px\"\n      >\n      </sl-skeleton>\n    </div>`;\n    }\n    static get styles() {\n        return [\n            sharedStyles,\n            css `\n        :host {\n          display: flex;\n        }\n      `,\n        ];\n    }\n};\nProfileListItemSkeleton = __decorate([\n    customElement(\"profile-list-item-skeleton\")\n], ProfileListItemSkeleton);\nexport { ProfileListItemSkeleton };\n//# sourceMappingURL=profile-list-item-skeleton.js.map","import { css, html, LitElement } from \"lit\";\nimport {\n  Profile,\n  ProfilesStore,\n  profilesStoreContext,\n} from \"@holochain-open-dev/profiles\";\nimport { derived, joinMap, StoreSubscriber } from \"@holochain-open-dev/stores\";\nimport { AgentPubKey } from \"@holochain/client\";\nimport { sharedStyles } from \"@holochain-open-dev/elements\";\nimport { consume } from \"@lit-labs/context\";\nimport { customElement, property } from \"lit/decorators.js\";\nimport { mapValues, pickBy, slice } from \"@holochain-open-dev/utils\";\nimport { localized, msg } from \"@lit/localize\";\n\nimport \"@holochain-open-dev/profiles/elements/agent-avatar.js\";\nimport \"@holochain-open-dev/profiles/elements/profile-list-item-skeleton.js\";\nimport \"@holochain-open-dev/elements/elements/display-error.js\";\n\nimport { PeerStatusStore, Status } from \"../peer-status-store.js\";\nimport { peerStatusStoreContext } from \"../context.js\";\nimport \"./avatar-with-status.js\";\n\n@localized()\n@customElement(\"list-agents-by-status\")\nexport class ListAgentsByStatus extends LitElement {\n  /** Public properties */\n\n  /**\n   * REQUIRED. The public keys identifying the agents whose presence is going to be shown.\n   */\n  @property({\n    type: Array,\n  })\n  agents!: AgentPubKey[];\n\n  /**\n   * @internal\n   */\n  @consume({ context: peerStatusStoreContext, subscribe: true })\n  @property({ type: Object })\n  store!: PeerStatusStore;\n\n  /**\n   * @internal\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property({ type: Object })\n  profilesStore!: ProfilesStore;\n\n  /**\n   * @internal\n   */\n  _profiles = new StoreSubscriber(this, () =>\n    this.profilesStore.agentsProfiles(this.agents)\n  );\n\n  /**\n   * @internal\n   */\n  _onlineAgents = new StoreSubscriber(this, () =>\n    derived(\n      joinMap(slice(this.store.agentsStatus, this.agents)),\n      (agentsStatus) =>\n        Array.from(\n          pickBy(\n            agentsStatus,\n            (status, _key) => status === Status.Online\n          ).keys()\n        )\n    )\n  );\n  /**\n   * @internal\n   */\n  _offlineAgents = new StoreSubscriber(this, () =>\n    derived(\n      joinMap(slice(this.store.agentsStatus, this.agents)),\n      (agentsStatus) =>\n        Array.from(\n          pickBy(\n            agentsStatus,\n            (status, _key) => status === Status.Offline\n          ).keys()\n        )\n    )\n  );\n\n  renderOnlineAgents(\n    profiles: ReadonlyMap<AgentPubKey, Profile | undefined>,\n    agentPubKeys: AgentPubKey[]\n  ) {\n    if (agentPubKeys.length === 0)\n      return html`<span\n        class=\"placeholder\"\n        style=\"text-align: center; padding: 16px;\"\n        >${msg(\"There are no agents online\")}</span\n      >`;\n\n    return html`\n      <div class=\"column\" style=\"flex: 1;\">\n        ${agentPubKeys.map(\n          (agentPubKey) => html` <div\n            class=\"row\"\n            style=\"align-items: center; margin-top: 8px; margin-bottom: 8px\"\n          >\n            <agent-avatar\n              slot=\"start\"\n              .agentPubKey=${agentPubKey}\n            ></agent-avatar>\n            <span style=\"margin-left: 8px\"\n              >${profiles.get(agentPubKey)?.nickname}</span\n            >\n          </div>`\n        )}\n      </div>\n    `;\n  }\n  renderOfflineAgents(\n    profiles: ReadonlyMap<AgentPubKey, Profile | undefined>,\n    agentPubKeys: AgentPubKey[]\n  ) {\n    if (agentPubKeys.length === 0)\n      return html`<span\n        class=\"placeholder\"\n        style=\"text-align: center; padding: 16px;\"\n        >${msg(\"There are no agents offline\")}</span\n      >`;\n\n    return html`\n      <div class=\"column\" style=\"flex: 1; opacity: 0.5;\">\n        ${agentPubKeys.map(\n          (agentPubKey) => html` <div\n            class=\"row\"\n            style=\"align-items: center; margin-top: 8px; margin-bottom: 8px\"\n          >\n            <agent-avatar\n              slot=\"start\"\n              .agentPubKey=${agentPubKey}\n            ></agent-avatar>\n            <span style=\"margin-left: 8px\"\n              >${profiles.get(agentPubKey)?.nickname}</span\n            >\n          </div>`\n        )}\n      </div>\n    `;\n  }\n\n  renderHeading() {\n    return html`\n      <span class=\"title\"\n        >${msg(\"Online\")}${this._onlineAgents.value !== undefined\n          ? ` - ${this._onlineAgents.value.length}`\n          : \"\"}</span\n      >\n    `;\n  }\n\n  renderAgents() {\n    switch (this._profiles.value.status) {\n      case \"pending\":\n        return html`<div class=\"column\">\n          ${Array(3).map(\n            () =>\n              html`<profile-list-item-skeleton></profile-list-item-skeleton>`\n          )}\n        </div> `;\n      case \"complete\":\n        return html`\n          ${this.renderOnlineAgents(\n            this._profiles.value.value,\n            this._onlineAgents.value\n          )}\n          <span class=\"title\" style=\"margin-top: 8px;\"\n            >${msg(\"Offline\")}${this._offlineAgents.value !== undefined\n              ? ` - ${this._offlineAgents.value.length}`\n              : \"\"}</span\n          >\n          ${this.renderOfflineAgents(\n            this._profiles.value.value,\n            this._offlineAgents.value\n          )}\n        `;\n      case \"error\":\n        return html`\n          <display-error\n            .error=${this._profiles.value.error.data.data}\n          ></display-error>\n        `;\n    }\n  }\n\n  render() {\n    return html`\n      <div class=\"column\" style=\"flex: 1\">\n        ${this.renderHeading()} ${this.renderAgents()}\n      </div>\n    `;\n  }\n\n  static styles = [\n    sharedStyles,\n    css`\n      :host {\n        display: flex;\n      }\n    `,\n  ];\n}\n","import { html } from \"lit-html\";\nimport { ProfilesZomeMock, demoProfiles } from \"@holochain-open-dev/profiles/mocks\";\nimport { PeerStatusZomeMock } from \"@holochain-open-dev/peer-status/mocks\";\nimport { ProfilesStore, ProfilesClient } from \"@holochain-open-dev/profiles\";\nimport { PeerStatusStore, PeerStatusClient } from \"@holochain-open-dev/peer-status\";\nimport \"@holochain-open-dev/profiles/elements/profiles-context.js\";\nimport \"@holochain-open-dev/peer-status/elements/peer-status-context.js\";\nimport \"@holochain-open-dev/peer-status/elements/list-agents-by-status.js\";\nconst profiles = demoProfiles();\nconst profilesStore = new ProfilesStore(new ProfilesClient(new ProfilesZomeMock(profiles)));\n\n// More on how to set up stories at: https://storybook.js.org/docs/7.0/web-components/writing-stories/introduction\nexport default {\n  title: \"Frontend/Elements/list-agents-by-status\",\n  tags: [\"autodocs\"],\n  component: \"list-agents-by-status\",\n  render: args => html` <profiles-context .store=${profilesStore}>\n      <peer-status-context\n        .store=${new PeerStatusStore(new PeerStatusClient(new PeerStatusZomeMock()))}\n      >\n        <list-agents-by-status\n          .agents=${Array.from(profiles.keys())}\n        ></list-agents-by-status>\n      </peer-status-context>\n    </profiles-context>`\n};\n\n// More on writing stories with args: https://storybook.js.org/docs/7.0/web-components/writing-stories/args\nexport const Demo = {};\nDemo.parameters = {\n  ...Demo.parameters,\n  docs: {\n    ...Demo.parameters?.docs,\n    source: {\n      originalSource: \"{}\",\n      ...Demo.parameters?.docs?.source\n    }\n  }\n};","import { css, html, LitElement } from \"lit\";\nimport { AgentPubKey } from \"@holochain/client\";\nimport { sharedStyles, hashProperty } from \"@holochain-open-dev/elements\";\nimport { customElement, property } from \"lit/decorators.js\";\n\nimport \"@holochain-open-dev/profiles/elements/agent-avatar.js\";\nimport \"./peer-status.js\";\n\n@customElement(\"avatar-with-status\")\nexport class AvatarWithStatus extends LitElement {\n  /** Public properties */\n\n  /**\n   * REQUIRED. The public key identifying the agent whose presence is going to be shown.\n   */\n  @property(hashProperty(\"agent-pub-key\"))\n  agentPubKey!: AgentPubKey;\n\n  render() {\n    return html`<agent-avatar .agentPubKey=${this.agentPubKey}>\n      <peer-status .agentPubKey=${this.agentPubKey} slot=\"badge\"></peer-status>\n    </agent-avatar>`;\n  }\n\n  static styles = [\n    sharedStyles,\n    css`\n      :host {\n        display: flex;\n      }\n    `,\n  ];\n}\n","import { css, html, LitElement } from \"lit\";\nimport { provide } from \"@lit-labs/context\";\nimport { customElement, property } from \"lit/decorators.js\";\n\nimport { peerStatusStoreContext } from \"../context.js\";\nimport { PeerStatusStore } from \"../peer-status-store.js\";\n\n@customElement(\"peer-status-context\")\nexport class PeerStatusContext extends LitElement {\n  @provide({ context: peerStatusStoreContext })\n  @property({ type: Object })\n  store!: PeerStatusStore;\n\n  render() {\n    return html`<slot></slot>`;\n  }\n\n  static styles = css`\n    :host {\n      display: contents;\n    }\n  `;\n}\n","import { consume } from \"@lit-labs/context\";\nimport { StoreSubscriber } from \"@holochain-open-dev/stores\";\nimport { AgentPubKey } from \"@holochain/client\";\nimport { css, html, LitElement } from \"lit\";\nimport { hashProperty, sharedStyles } from \"@holochain-open-dev/elements\";\nimport { customElement, property } from \"lit/decorators.js\";\n\nimport { peerStatusStoreContext } from \"../context.js\";\nimport { PeerStatusStore } from \"../peer-status-store.js\";\n\n@customElement(\"peer-status\")\nexport class PeerStatus extends LitElement {\n  /** Public properties */\n\n  /**\n   * REQUIRED. The public key identifying the agent whose presence is going to be shown.\n   */\n  @property(hashProperty(\"agent-pub-key\"))\n  agentPubKey!: AgentPubKey;\n\n  /**\n   * @internal\n   */\n  @consume({ context: peerStatusStoreContext, subscribe: true })\n  @property({ type: Object })\n  store!: PeerStatusStore;\n\n  /**\n   * @internal\n   */\n  _status = new StoreSubscriber(this, () =>\n    this.store.agentsStatus.get(this.agentPubKey)\n  );\n\n  render() {\n    return html`<div class=\"outer\">\n      <div class=${this._status.value}></div>\n    </div>`;\n  }\n\n  static styles = [\n    sharedStyles,\n    css`\n      .outer {\n        position: relative;\n        height: 15px;\n        width: 15px;\n        background-color: #666666;\n      }\n\n      .outer,\n      .online,\n      .idle,\n      .offline {\n        border-radius: 50%;\n      }\n\n      .online,\n      .idle {\n        top: 2px;\n        left: 2px;\n        position: absolute;\n        height: 11px;\n        width: 11px;\n      }\n\n      .online {\n        background-color: #00ef00;\n      }\n\n      .idle {\n        background-color: #df8600;\n      }\n\n      .offline {\n        top: 2px;\n        left: 2px;\n        position: relative;\n        height: 5px;\n        width: 5px;\n        background-color: #666666;\n        border: 3px solid #a7a7a7;\n      }\n    `,\n  ];\n}\n"],"names":[],"sourceRoot":""}